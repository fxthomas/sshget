#!/usr/bin/python
# coding=utf-8

# Base Python File (sshget)
# Created: Sat Feb 23 13:26:48 2013
# Version: 1.0
#
# This Python script was developped by François-Xavier Thomas.
# You are free to copy, adapt or modify it.
# If you do so, however, leave my name somewhere in the credits, I'd appreciate
# it ;)
#
# (ɔ) François-Xavier Thomas <fx.thomas@gmail.com>

"""Interactive tool for listing and downloading files on remote SSH servers,
whose name matches specified keywords and filters."""

import argparse

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("host", help="Host name (e.g. user@host.com)")
parser.add_argument(
    "keyword",
    help="Keywords and filters used to search for a file, using a find(1) "
    "command on the remote server. Standard arguments will be converted into "
    "`-name '*keyword*'` in the remotely execute command, and the first "
    "argument starting with a dash ('-') will turn itself and all "
    "later keywords into raw find(1) arguments.",
    nargs="+")
parser.add_argument(
    "--addkeys",
    help="Auto-add missing SSH keys to the hosts file",
    action="store_true")
parser.add_argument(
    "--ignore-case", "-i",
    help="Ignore case for keyword arguments. Uses `-iname` instead of `-name` "
    "to look for filename patterns.",
    action="store_true")
args = parser.parse_args()

import paramiko
import sys
import re
import shlex
import subprocess
from os.path import dirname, basename
from progress import ProgressBar
from time import time

if sys.version_info.major == 3:
    raw_input = input

server_re = re.compile(
    r"((?P<username>.*?)@)?(?P<server>[^:]+)(:(?P<dir>.*))?")

# Arguments
m = server_re.match(args.host)
if m is None:
    print("Couldn't parse {0}".format(args.host))
    exit(1)
m = m.groupdict()
username = m["username"]
server = m["server"]
directory = m["dir"]
filenameparts = args.keyword

# Start SSH session
print("Connecting to {0}@{1}".format(username, server))
ssh = paramiko.SSHClient()
ssh.load_system_host_keys()
if args.addkeys:
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(server, username=username)


def input_numbers(message, nmin, nmax):
    inp = raw_input("{0} [{1}-{2}] ".format(message, nmin, nmax))
    inp = inp.split(",")
    indexes = []
    for p in inp:
        try:
            ip = int(p)
            if ip >= nmin and ip <= nmax:
                indexes.append(ip)
            else:
                print("Invalid index: {0}".format(ip))

        except ValueError:
            pp = p.split("-")
            if len(pp) == 2:
                try:
                    rmin = min(max(int(pp[0]), nmin), nmax)
                    rmax = min(max(int(pp[1]), nmin), nmax)
                    for f in range(rmin, rmax + 1):
                        indexes.append(f)
                except ValueError:
                    print("Invalid input: {0}".format(pp))
            else:
                print("Invalid input: {0}".format(p))

    return indexes


def download_rsync(filename):
    command = ["rsync", "--progress", "--partial"]
    if username is not None:
        command.append(
            "{0}@{1}:\"{2}\"".format(username, server, filename))
    else:
        command.append("{0}:\"{1}\"".format(server, filename))
    command.append(".")
    subprocess.call(command)


def download_native(filename, blocksize=65536):
    sftp = ssh.open_sftp()
    sftp.chdir(dirname(filename))

    # Open remote file and stat it
    start = time()
    remote = sftp.open(basename(filename))
    size = remote.stat().st_size
    current_read = 0
    current_speed = 0

    # Create progress bar
    from progress import ProgressBar
    progress = ProgressBar("blue", width=60, block="=", empty=" ")

    # Open local file for writing
    with open(basename(filename), "w") as local:
        while True:
            # Render progress
            progress.render(
                100 * current_read / size,
                "{0}, {1}kB/s".format(basename(filename), current_speed / 1024)
            )

            # Read data from network
            data = remote.read(blocksize)
            local.write(data)

            # Update metrics
            current_read = current_read + len(data)
            current_speed = current_read / (time() - start)

            # Break if we're at the end
            if len(data) < blocksize:
                break

    # Render progress
    progress.render(
        100 * current_read / size,
        "{0}, {1}kB/s".format(basename(filename), current_speed / 1024)
    )

    # Close connection
    sftp.close()


def find(filenameparts, directory=None, ignore_case=False):
    findcommand = ["find", directory or ".", "-not", "-type", "d"]
    has_extra = False
    for p in filenameparts:
        if p.startswith("-"):
            has_extra = True
        if has_extra:
            findcommand.append(p)
        else:
            findcommand.append("-iname" if ignore_case else "-name")
            findcommand.append("*%s*" % p.strip())
    findcommand = ' '.join(map(shlex.quote, findcommand))
    print("Executing: {0}".format(findcommand))
    _, stdout, _ = ssh.exec_command(findcommand)
    files = stdout.readlines()
    files = sorted([f.rstrip("\n") for f in files])
    return files

# Find files
files = find(filenameparts, directory=directory, ignore_case=args.ignore_case)
download = download_rsync

# Ask the user which one, if necessary
print("")
if len(files) == 0:
    print("Found no files matching your request")

elif len(files) == 1:
    print("Found: {0}".format(files[0]))
    i = raw_input("Download? [Y/n] ")
    if i == '' or i.lower() == 'y':
        download(files[0])

# Show the files to the user
else:
    print("Found {0} files matching your request:".format(len(files)))
    for f, i in zip(files, range(len(files))):
        print("  {0}: {1}".format(i + 1, basename(f)))
    print("")
    nim = input_numbers("Which one should I download?", 1, len(files))
    print("")

    for ii in nim:
        download(files[ii - 1])
